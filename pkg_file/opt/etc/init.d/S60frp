#! /bin/sh

NAME=frpc
DAEMON=/opt/bin/frpc
DAEMON_OPTS="-c /opt/etc/frp/frpc.toml"
DAEMON_RELOAD_OPTS="reload -c /opt/etc/frp/frpc.toml"
PIDFILE=/var/run/$NAME.pid

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

#
# Function that starts the daemon/service
#
do_start(){
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    #   3 if configuration file not ready for daemon
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --background -m -- $DAEMON_OPTS \
        || return 2
    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    $DAEMON $DAEMON_RELOAD_OPTS
    return 0
}

log_daemon_msg(){
    echo $1
    logger $1
}

case "$1" in
  start)
    echo "Starting $NAME"
    do_start
    case "$?" in
        0) log_daemon_msg "$NAME started" ;;
        1) log_daemon_msg "$NAME already running" ;;
        *) log_daemon_msg "$NAME start failed" ;;
    esac
    ;;
  stop)
    echo "Stopping $NAME"
    do_stop
    case "$?" in
        0) log_daemon_msg "$NAME stopped" ;;
        1) log_daemon_msg "$NAME already stopped" ;;
        *) log_daemon_msg "$NAME stop failed" ;;
    esac
    ;;
  reload|force-reload)
    #
    # If do_reload() is not implemented then leave this commented out
    # and leave 'force-reload' as an alias for 'restart'.
    #
    echo "Reloading $NAME"
    do_reload
    log_daemon_msg "$NAME reloaded"
    ;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    echo "Restarting $NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
        0) log_daemon_msg "$NAME restarted" ;;
        1) log_daemon_msg "$NAME already running" ;; # Old process is still running
        *) log_daemon_msg "$NAME restart failed" ;;  # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_daemon_msg "$NAME stop failed"
        ;;
    esac
    ;;
  firewall-start)
    log_daemon_msg "$NAME applied firewall rules"
    ;;
  firewall-stop)
    log_daemon_msg "$NAME flushed firewall rules"
    ;;
  firewall-restart)
    log_daemon_msg "$NAME reapplied firewall rules"
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|reload|force-reload|firewall-start|firewall-stop|firewall-restart}"
    exit 1
    ;;
esac
